// src/bot.js
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è webhook.js –∏ scheduler.js

import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { setState, getState } from './db.js';
import {
  WELCOME,
  SURVIVAL_MENU,
  PHRASES,
  AFTER_FILE,
  QUIZ,
  TIER1_PITCH,
  TIER23_PITCH,
  CALENDLY_URL,
  TIER1_WEEKMAP_URL,
  TIER1_PAYMENT_URL,
} from '../config/texts.js';

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
export const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–∞–ø–∫–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname  = path.dirname(__filename);
const voicesDir  = path.resolve(__dirname, '..', 'voices');

const VOICE_FILES = {
  doc:    '–î–æ–∫—Ç–æ—Ä.ogg',
  shop:   '–ú–∞–≥–∞–∑–∏–Ω.ogg',
  school: '–®–∫–æ–ª–∞.ogg',
  bank:   '–ë–∞–Ω–∫.ogg',
  small:  '7—Ñ—Ä–∞–∑.ogg',
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('update', ctx => console.log('üì¨ got update:', JSON.stringify(ctx.update)));

// /start ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
bot.start(async ctx => {
  await ctx.reply(WELCOME, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(SURVIVAL_MENU),
  });
});

// 1) –í—ã–±–æ—Ä Survival Pack
bot.action(/^(doc|shop|school|bank|small)$/, async ctx => {
  const key = ctx.match[1];
  const { caption } = PHRASES[key];
  const voicePath = path.join(voicesDir, VOICE_FILES[key]);
  console.log(`Trying to send voice: ${voicePath}`);
  try {
    if (!fs.existsSync(voicePath)) throw new Error(`File not found: ${voicePath}`);
    await ctx.replyWithVoice(
      { source: fs.createReadStream(voicePath) },
      { caption, parse_mode: 'Markdown' }
    );
    await ctx.reply(AFTER_FILE, { parse_mode: 'Markdown' });
    setState(ctx.from.id, { tag: 'await_voice', tagTS: Date.now() });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ voice (${key}):`, err.message);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  } finally {
    await ctx.answerCbQuery();
  }
});

// 2) –ü–æ–ª—É—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('voice', async ctx => {
  const uid = ctx.from.id;
  const st  = getState(uid);
  if (st.tag !== 'await_voice') return;
  // –§–æ—Ä–≤–∞—Ä–¥–∏–º —Ö–æ–∑—è–∏–Ω—É
  await ctx.forwardMessage(process.env.ADMIN_CHAT_ID);
  setState(uid, { tag: 'voice_pending' });
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑
  await ctx.reply(
    '–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–∏–ª–∞! üéâ\n–§–∏–¥–±—ç–∫ –ø—Ä–∏—à–ª—é —á—É—Ç—å –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞ ‚Äî –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n–í—Å–µ–≥–æ 4 –∫–Ω–æ–ø–∫–∏, —ç—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã. üöÄ',
    Markup.inlineKeyboard([[{ text: 'üöÄ –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞', callback_data: 'start_quiz' }]])
  );
});

// 3) –°—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞
bot.action('start_quiz', async ctx => {
  setState(ctx.from.id, { quiz_answers: {} });
  await ctx.editMessageText(QUIZ.q1.text, Markup.inlineKeyboard(QUIZ.q1.buttons));
  await ctx.answerCbQuery();
});

// 4) –û—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞
bot.action(/^quiz_q(\d):(.*)$/, async ctx => {
  const uid         = ctx.from.id;
  const qNum        = +ctx.match[1];
  const answer      = ctx.match[2];
  const st          = getState(uid);
  const updated     = { ...st.quiz_answers, [`q${qNum}`]: answer };
  setState(uid, { quiz_answers: updated });
  const nextQNum = qNum + 1;
  const nextQ    = QUIZ[`q${nextQNum}`];
  if (nextQ) {
    await ctx.editMessageText(nextQ.text, Markup.inlineKeyboard(nextQ.buttons));
  } else {
    await ctx.editMessageText('‚úÖ –ì–æ—Ç–æ–≤–æ! –°—á–∏—Ç–∞—é —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...');
    await finishQuiz(ctx, updated);
  }
  await ctx.answerCbQuery();
});

// 5) –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ
async function finishQuiz(ctx, answers) {
  const uid     = ctx.from.id;
  const urgency = +answers.q3;
  const time    = answers.q4;
  if (urgency >= 7 && (time === '15' || time === '30+')) {
    setState(uid, { tag: 'lead_tier23' });
    const text = TIER23_PITCH.replace('{urgency}', urgency).replace('{time}', time);
    await ctx.reply(text, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([[Markup.button.url('üî∏ –ë—Ä–æ–Ω–∏—Ä—É—é Zoom', CALENDLY_URL)]])
    });
  } else {
    setState(uid, { tag: 'lead_tier1' });
    await ctx.reply(TIER1_PITCH, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üî∏ –°–∫–∞—á–∞—Ç—å WEEK-MAP', TIER1_WEEKMAP_URL)],
        [Markup.button.url('üî∏ –û–ø–ª–∞—Ç–∏—Ç—å $111', TIER1_PAYMENT_URL)],
      ])
    });
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
import './scheduler.js';

// src/bot.js
import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { setState, getState } from './db.js';
import {
  WELCOME,
  SURVIVAL_MENU,
  PHRASES,
  AFTER_FILE,
  QUIZ,
  TIER1_PITCH,
  TIER23_PITCH,
  CALENDLY_URL,
  TIER1_WEEKMAP_URL,
  TIER1_PAYMENT_URL,
} from '../config/texts.js';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º bot, —á—Ç–æ–±—ã webhook.js –∏ scheduler.js –º–æ–≥–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
export const bot = new Telegraf(process.env.BOT_TOKEN);

// --- –ü—É—Ç–∏ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º –≥–æ–ª–æ—Å–∞ ---
const __filename = fileURLToPath(import.meta.url);
const __dirname  = path.dirname(__filename);
const voicesDir  = path.resolve(__dirname, '..', 'voices');

const VOICE_PATHS = {
  doc:    '–î–æ–∫—Ç–æ—Ä.ogg',
  shop:   '–ú–∞–≥–∞–∑–∏–Ω.ogg',
  school: '–®–∫–æ–ª–∞.ogg',
  bank:   '–ë–∞–Ω–∫.ogg',
  small:  '7—Ñ—Ä–∞–∑.ogg',
};

// --- /start survival ---
bot.start(async ctx => {
  if (ctx.startPayload !== 'survival') return;
  await ctx.reply(WELCOME, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(SURVIVAL_MENU),
  });
});

// --- 1. –í—ã–±–æ—Ä Survival Pack ---
bot.action(/^(doc|shop|school|bank|small)$/, async ctx => {
  const key = ctx.match[1];
  const { caption } = PHRASES[key];
  const voiceFile = path.join(voicesDir, VOICE_PATHS[key]);

  console.log(`Trying to send voice: ${voiceFile}`);
  try {
    if (!fs.existsSync(voiceFile)) {
      throw new Error(`File not found: ${voiceFile}`);
    }
    // –°–Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ + –ø–æ–¥–ø–∏—Å—å, –∑–∞—Ç–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ AFTER_FILE
    await ctx.replyWithVoice(
      { source: fs.createReadStream(voiceFile) },
      { caption, parse_mode: 'Markdown' }
    );
    await ctx.reply(AFTER_FILE, { parse_mode: 'Markdown' });

    setState(ctx.from.id, { tag: 'await_voice', tagTS: Date.now() });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ voice (${key}):`, err.message);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  } finally {
    await ctx.answerCbQuery();
  }
});

// --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
bot.on('voice', async ctx => {
  const uid = ctx.from.id;
  const st  = getState(uid);
  if (st.tag !== 'await_voice') return;

  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≥–æ–ª–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É
  await ctx.forwardMessage(process.env.ADMIN_CHAT_ID);
  setState(uid, { tag: 'voice_pending' });

  // –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –æ–ø—Ä–æ—Å
  await ctx.reply(
    '–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–∏–ª–∞! üéâ\n–§–∏–¥–±—ç–∫ –ø—Ä–∏—à–ª—é —á—É—Ç—å –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞ ‚Äî –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n–í—Å–µ–≥–æ 4 –∫–Ω–æ–ø–∫–∏, —ç—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã. üöÄ',
    Markup.inlineKeyboard([
      [{ text: 'üöÄ –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞', callback_data: 'start_quiz' }],
    ])
  );
});

// --- 3. –ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞ ---
bot.action('start_quiz', async ctx => {
  setState(ctx.from.id, { quiz_answers: {} });
  await ctx.editMessageText(QUIZ.q1.text, Markup.inlineKeyboard(QUIZ.q1.buttons));
  await ctx.answerCbQuery();
});

// --- 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞ ---
bot.action(/^quiz_q(\d):(.+)$/, async ctx => {
  const uid         = ctx.from.id;
  const questionNum = +ctx.match[1];
  const answer      = ctx.match[2];

  const st              = getState(uid);
  const updatedAnswers  = { ...st.quiz_answers, [`q${questionNum}`]: answer };
  setState(uid, { quiz_answers: updatedAnswers });

  const nextNum = questionNum + 1;
  const nextQ   = QUIZ[`q${nextNum}`];
  if (nextQ) {
    await ctx.editMessageText(nextQ.text, Markup.inlineKeyboard(nextQ.buttons));
  } else {
    await ctx.editMessageText('‚úÖ –ì–æ—Ç–æ–≤–æ! –°—á–∏—Ç–∞—é —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...');
    await finishQuiz(ctx, updatedAnswers);
  }
  await ctx.answerCbQuery();
});

// --- 5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ ---
async function finishQuiz(ctx, answers) {
  const uid     = ctx.from.id;
  const urgency = +answers.q3;
  const time    = answers.q4;

  if (urgency >= 7 && (time === '15' || time === '30+')) {
    setState(uid, { tag: 'lead_tier23' });
    const pitch = TIER23_PITCH.replace('{urgency}', urgency).replace('{time}', time);
    await ctx.reply(pitch, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üî∏ –ë—Ä–æ–Ω–∏—Ä—É—é 10-–º–∏–Ω Zoom', CALENDLY_URL)]
      ])
    });
  } else {
    setState(uid, { tag: 'lead_tier1' });
    await ctx.reply(TIER1_PITCH, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üî∏ –°–∫–∞—á–∞—Ç—å WEEK-MAP', TIER1_WEEKMAP_URL)],
        [Markup.button.url('üî∏ –û–ø–ª–∞—Ç–∏—Ç—å $111', TIER1_PAYMENT_URL)],
      ])
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞, —á—Ç–æ–±—ã webhook.js –º–æ–≥ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–ª–∏ polling-—Ä–µ–∂–∏–º
export function launchBot() {
  return bot.launch();
}

// –ï—Å–ª–∏ –≤—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ webhook.js, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
// launchBot();


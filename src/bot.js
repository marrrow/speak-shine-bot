// src/bot.js
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è webhook.js –∏ scheduler.js

import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { setState, getState } from './db.js';
import {
  WELCOME,
  SURVIVAL_MENU,
  PHRASES,
  AFTER_FILE,
  QUIZ,
  TIER1_PITCH,
  TIER23_PITCH,
  CALENDLY_URL,
  TIER1_WEEKMAP_URL,
  TIER1_PAYMENT_URL,
} from '../config/texts.js';

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
export const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–∞–ø–∫–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname  = path.dirname(__filename);
const voicesDir  = path.resolve(__dirname, '..', 'voices');

const VOICE_FILES = {
  doc:    '–¥–æ–∫—Ç–æ—Ä.ogg',
  shop:   '–º–∞–≥–∞–∑–∏–Ω.ogg',
  school: '—à–∫–æ–ª–∞.ogg',
  bank:   '–±–∞–Ω–∫.ogg',
  small:  '7—Ñ—Ä–∞–∑.ogg',
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('update', ctx => console.log('üì¨ got update:', JSON.stringify(ctx.update)));

// /start ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
bot.start(async ctx => {
  await ctx.replyWithHTML(WELCOME, Markup.inlineKeyboard(SURVIVAL_MENU));
});

// 1) –í—ã–±–æ—Ä Survival Pack
bot.action(/^(doc|shop|school|bank|small)$/, async ctx => {
  const key = ctx.match[1];
  const { caption } = PHRASES[key];
  const voicePath = path.join(voicesDir, VOICE_FILES[key]);

  try {
    if (!fs.existsSync(voicePath)) throw new Error(`File not found: ${voicePath}`);
    await ctx.replyWithVoice(
      { source: fs.createReadStream(voicePath) },
      { caption, parse_mode: 'HTML' }
    );
    await ctx.replyWithHTML(AFTER_FILE);
    setState(ctx.from.id, { tag: 'await_voice' });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ voice (${key}):`, err.message);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  } finally {
    await ctx.answerCbQuery();
  }
});

// 2) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const ADMIN_ID = String(process.env.ADMIN_CHAT_ID);
bot.on('voice', async ctx => {
  const uid      = ctx.from.id;
  const st       = getState(uid) || {};

  // 2A) –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ await_voice ‚Äî —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –≥–æ–ª–æ—Å
  if (st.tag === 'await_voice') {
    // —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º –∞–¥–º–∏–Ω—É
    await ctx.forwardMessage(ADMIN_ID);
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –∂–¥—ë–º —Ñ–∏–¥–±–µ–∫–∞
    setState(uid, { tag: 'voice_pending' });
    // —Å–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    await ctx.replyWithHTML(
      'üéâ –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–∏–ª–∞! –ü–æ–∫–∞ –≥–æ—Ç–æ–≤–ª—é —Ñ–∏–¥–±–µ–∫, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø–ª–∞–Ω:',
      Markup.inlineKeyboard([[{ text: 'üöÄ –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞', callback_data: 'start_quiz' }]])
    );
    return;
  }

  // 2B) –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ñ–æ—Ä–≤–∞—Ä–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–¥–±–µ–∫ –∫–ª–∏–µ–Ω—Ç—É
  const fromId = String(ctx.from.id);
  if (fromId === ADMIN_ID && ctx.chat.type === 'private') {
    const replyTo = ctx.message.reply_to_message;
    if (replyTo && replyTo.forward_from) {
      const clientId = replyTo.forward_from.id;
      // —à–ª—ë–º –≥–æ–ª–æ—Å –∞–¥–º–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É
      await bot.telegram.sendVoice(clientId, { source: ctx.message.voice.file_id });
      // —É–≤–µ–¥–æ–º–ª—è–µ–º
      await bot.telegram.sendMessage(
        clientId,
        '‚úÖ <b>–§–∏–¥–±–µ–∫ –≥–æ—Ç–æ–≤!</b> –°–ª—É—à–∞–π –∏ –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞ –º–Ω–æ–π.',
        { parse_mode: 'HTML' }
      );
      // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setState(clientId, {});
    }
    return;
  }
});

// 3) –°—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞
bot.action('start_quiz', async ctx => {
  setState(ctx.from.id, { quiz_answers: {} });
  await ctx.editMessageText(QUIZ.q1.text, Markup.inlineKeyboard(QUIZ.q1.buttons));
  await ctx.answerCbQuery();
});

// 4) –û—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞
bot.action(/^quiz_q(\d):(.*)$/, async ctx => {
  const uid     = ctx.from.id;
  const qNum    = +ctx.match[1];
  const answer  = ctx.match[2];
  const st      = getState(uid) || {};
  const answers = { ...(st.quiz_answers || {}), [`q${qNum}`]: answer };
  setState(uid, { quiz_answers: answers });

  const nextQ = QUIZ[`q${qNum + 1}`];
  if (nextQ) {
    await ctx.editMessageText(nextQ.text, Markup.inlineKeyboard(nextQ.buttons));
  } else {
    await ctx.editMessageText('‚úÖ –ì–æ—Ç–æ–≤–æ! –°—á–∏—Ç–∞—é —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...');
    await finishQuiz(ctx, answers);
  }
  await ctx.answerCbQuery();
});

// 5) –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏
async function finishQuiz(ctx, answers) {
  const uid     = ctx.from.id;
  const urgency = +answers.q3;
  const time    = answers.q4;

  if (urgency >= 7 && ['15','30','30+'].includes(time)) {
    setState(uid, { tag: 'lead_tier23' });
    const text = TIER23_PITCH.replace('{urgency}', urgency).replace('{time}', time);
    await ctx.replyWithHTML(text, Markup.inlineKeyboard([
      [ Markup.button.url('üî∏ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Zoom', CALENDLY_URL) ]
    ]));
  } else {
    setState(uid, { tag: 'lead_tier1' });
    await ctx.replyWithHTML(TIER1_PITCH, Markup.inlineKeyboard([
      [Markup.button.url('üî∏ –°–∫–∞—á–∞—Ç—å WEEK‚ÄëMAP', TIER1_WEEKMAP_URL)],
      [Markup.button.url('üî∏ –û–ø–ª–∞—Ç–∏—Ç—å $111', TIER1_PAYMENT_URL)]
    ]));
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "book_zoom"
bot.action('book_zoom', async ctx => {
  await ctx.replyWithHTML(`–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è —Å—é–¥–∞: <a href="${CALENDLY_URL}">${CALENDLY_URL}</a>`);
  setState(ctx.from.id, { tag: 'call_pending' });
  await ctx.answerCbQuery();
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
import './scheduler.js';

// –ó–∞–ø—É—Å–∫ polling –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
// bot.launch();

// graceful stop
process.once('SIGINT', () => bot.stop());
process.once('SIGTERM', () => bot.stop());
